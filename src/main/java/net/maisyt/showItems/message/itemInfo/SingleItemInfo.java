package net.maisyt.showItems.message.itemInfo;

import net.maisyt.showItems.ShowItemsMod;

import java.util.ArrayList;
import java.util.List;

public class SingleItemInfo extends ItemsInfo {
    private String playerName;
    private net.maisyt.minecraft.util.text.Text itemName;
    /**
     * ItemID as a fallback if the item cannot be translated.
     */
    private String itemID;
    private String translationKey;
    /**
     * "State" of the custome model (?).
     * 0 if not having that.
     */
    private int customModelData = 0;

    /**
     * A list of tooltips string generated by my ItemUtil.
     */
    private List<net.maisyt.minecraft.util.text.Text> tooltips = new ArrayList<>();
    private boolean hasEnchantments;
    private boolean stackable;
    private ItemType itemType;

    /**
     * If the item is "uncountable" (e.g. is a tool), this value is invalid.
     */
    private int amount;

    /**
     * If the item has durability, these two values will be set.
     */
    private int maxDurability;
    private int currentDurability;

    public SingleItemInfo() {
    }

    /**
     * Create a countable / stackable item.
     */
    public SingleItemInfo(String playerName, net.maisyt.minecraft.util.text.Text itemName, String itemTranslationKey, String itemID, boolean hasEnchantments, int amount, boolean stackable,ItemType itemType){
        this.playerName = playerName;
        this.itemName = itemName;
        this.itemID = itemID;
        this.translationKey = itemTranslationKey;
        this.hasEnchantments = hasEnchantments;
        this.amount = amount;
        this.stackable = stackable;
        this.itemType = itemType;
    }

    /**
     * Create an uncountable item, i.e. a tool.
     */
    public SingleItemInfo(String playerName, net.maisyt.minecraft.util.text.Text itemName, String itemTranslationKey, String itemID, List<net.maisyt.minecraft.util.text.Text> tooltips,
                          boolean hasEnchantments, int maxDurability, int currentDurability) {
        this.playerName = playerName;
        this.itemName = itemName;
        this.itemID = itemID;
        this.translationKey = itemTranslationKey;
        this.tooltips = tooltips;
        this.hasEnchantments = hasEnchantments;
        this.maxDurability = maxDurability;
        this.currentDurability = currentDurability;
        this.itemType = ItemType.TOOL;
    }

    public String getPlayerName() {
        return playerName;
    }

    public void setPlayerName(String playerName) {
        this.playerName = playerName;
    }

    public net.maisyt.minecraft.util.text.Text getItemName() {
        return itemName;
    }

    public String getItemTranslatedName(){
        try {
            return getItemName().getFullDisplayString();
        } catch (Exception e){
            // fail to get translation, use id instead
            ShowItemsMod.LOGGER.warn("failed to get item name string from {}", getItemName());
            return getItemID();
        }
    }

    public void setItemName(net.maisyt.minecraft.util.text.Text itemName) {
        this.itemName = itemName;
    }

    public String getItemID() {
        return itemID;
    }

    public void setItemID(String itemID) {
        this.itemID = itemID;
    }

    public String getTranslationKey() {
        return translationKey;
    }

    public void setTranslationKey(String translationKey) {
        this.translationKey = translationKey;
    }

    public List<net.maisyt.minecraft.util.text.Text> getTooltips() {
        return tooltips;
    }

    public void setTooltips(List<net.maisyt.minecraft.util.text.Text> tooltips) {
        this.tooltips = tooltips;
    }

    public boolean getEnchantments() {
        return hasEnchantments;
    }

    public void setEnchantments(boolean hasEnchantment) {
        this.hasEnchantments = hasEnchantment;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public void setStackable(boolean stackable){
        this.stackable = stackable;
    }

    public boolean isStackable(){
        return stackable;
    }

    public int getMaxDurability() {
        return maxDurability;
    }

    public void setMaxDurability(int maxDurability) {
        this.maxDurability = maxDurability;
        this.itemType = ItemType.TOOL;
    }

    public int getCurrentDurability() {
        return currentDurability;
    }

    public void setCurrentDurability(int currentDurability) {
        this.currentDurability = currentDurability;
        this.itemType = ItemType.TOOL;
    }

    public boolean hasEnchantments() {
        return hasEnchantments;
    }

    public void setHasEnchantments(boolean hasEnchantments) {
        this.hasEnchantments = hasEnchantments;
    }

    public ItemType getItemType() {
        return itemType;
    }

    public void setItemType(ItemType itemType) {
        this.itemType = itemType;
    }

    public boolean isDamaged(){
        return itemType == ItemType.TOOL && currentDurability < maxDurability;
    }

    public double getDurabilityPercentage(){
        return Math.max(0.0, Math.min(1.0, ((double) currentDurability / (double) maxDurability)));
    }

    public int getCustomModelData() {
        return customModelData;
    }

    public void setCustomModelData(int customModelData) {
        this.customModelData = customModelData;
    }

    public boolean hasCustomModelData(){
        return customModelData != 0;
    }

    public boolean hasTooltips(){
        return tooltips != null && !tooltips.isEmpty();
    }

    @Override
    public String toString() {
        return "SingleItemInfo{" +
                "playerName='" + playerName + '\'' +
                ", itemName=" + itemName +
                ", itemID='" + itemID + '\'' +
                ", translationKey='" + translationKey + '\'' +
                ", customModelData=" + customModelData +
                ", tooltips=" + tooltips +
                ", hasEnchantments=" + hasEnchantments +
                ", stackable=" + stackable +
                ", itemType=" + itemType +
                ", amount=" + amount +
                ", maxDurability=" + maxDurability +
                ", currentDurability=" + currentDurability +
                '}';
    }
}
